* Initial config
** Emacs server
Start Emacs server.
#+begin_src emacs-lisp
  (server-start)
#+end_src
** Sensitive information
Load information I don't want to be publicly available – for one reason or another – from a separate file.
#+begin_src emacs-lisp
  (load "~/syncdir/.emacs.secrets.el")
#+end_src
** Packages

=use-package= makes using and configuring packages simpler.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("gnu"   . "http://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (add-to-list 'load-path "~/.emacs.d/elisp")

  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
** Org-mode

=org-plus=contrib= package includes extra things contributed to =org-mode=.

#+begin_src emacs-lisp
  (use-package org
    :ensure org-contrib
    :config
    (require 'org-checklist)
    (require 'org-collector)
    (advice-add 'org-clock-out :after 'org-save-all-org-buffers)
    :custom
    (org-ellipsis " ↓")
    (org-src-window-setup 'current-window)
    :hook (org-mode . tsl/org-mode-setup)
    :bind (("C-c l" . org-store-link)
           ("C-c a" . 'org-agenda)
           ("C-c c" . 'org-capture)
           ("C-c b" . 'org-iswitchb)
           ("C-c C-x C-x" . 'org-clock-in-last)
           ("C-c C-x C-o" . 'org-clock-out)
           ("C-c C-x C-j" . 'org-clock-goto)
           ("C-c C-x C-q" . 'org-clock-cancel)
           :map org-mode-map
           ("C-c e" . org-table-edit-field)
           ("M-p" . outline-previous-visible-heading)
           ("M-n" . outline-next-visible-heading)
           ("M-P" . org-backward-heading-same-level)
           ("M-N" . org-forward-heading-same-level)
           ("M-U" . outline-up-heading)))

  (use-package org-bullets
    :init (setq org-bullets-bullet-list '("→")))

  (defun tsl/org-mode-setup ()
    (org-indent-mode 1)
    (org-bullets-mode 1)
    (visual-line-mode 1)
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
#+end_src
** Clean up UI

Removing all the extra bars, messages and such makes Emacs cleaner. Setting up some fring gives windows some breathing room.

#+begin_src emacs-lisp
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (tooltip-mode 0)
  (set-fringe-mode 10)
  (menu-bar-mode 0)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq frame-title-format "%b")
  #+end_src

Load theme and set font and set custom themes location.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Cascadia Code-12"))
  (face-spec-set 'variable-pitch '((t (:family "IBM Plex Sans"))))

  (let ((basedir "~/.emacs.d/themes/"))
    (dolist (f (directory-files basedir))
      (if (and (not (or (equal f ".") (equal f "..")))
               (file-directory-p (concat basedir f)))
          (add-to-list 'custom-theme-load-path (concat basedir f)))))

  (load-theme 'yet-another t)
  (prefer-coding-system 'utf-8)
  #+end_src
* Clean up
** Move some things out of the way
Backups to separate folder. And some settings for backups.
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
#+end_src
custom-set-variables to separate file
#+begin_src emacs-lisp
  (setq custom-file (make-temp-file "emacs-customs"))
  (load custom-file)
#+end_src
* Modeline

=doom-modeline= seems like a good choice. =all-the-icons= makes it possible to use all the icons.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :custom
    (all-the-icons-scale-factor 1))

  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src
* Config files to register
Quick acces to config files by putting them to register. Access with: =C-x r j=
#+begin_src emacs-lisp
  (set-register ?e '(file . "~/.emacs.d/conf.org")) ; Emacs config
  (set-register ?i '(file . "~/.config/i3/config")) ; i3
#+end_src
* Calendar in Finnish
Finnish day and month names, and week starts from Monday.
#+begin_src emacs-lisp
  (setq calendar-week-start-day 1
        calendar-day-name-array
        ["sunnuntai"
         "maanantai"
         "tiistai"
         "keskiviikko"
         "torstai"
         "perjantai"
         "lauantai"]
        calendar-month-name-array
        ["tammi" "helmi" "maalis" "huhti" "touko"
         "kesä" "heinä" "elo" "syys"
         "loka" "marras" "joulu"]
        calendar-day-abbrev-array
        ["sun" "maa" "tii" "kes" "tor" "per" "lau"]
        calendar-day-header-array
        ["su" "ma" "ti" "ke" "to" "pe" "la"])
#+end_src
* Windows and buffers

=window=numbering= gives the ability to move to window with M-number. =winner-mode= lets you undo and redo window changes.

#+begin_src emacs-lisp
  (use-package window-numbering
    :config (window-numbering-mode 1))
  (winner-mode 1)
#+end_src
Use ibuffer. Kill the current buffer without asking.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  (defalias 'list-buffers 'ibuffer)
#+end_src
Some various commands

Answer "y or n" instead "yes or no"
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
* Abbrevs and visual-line-mode
Use =abbrev-mode= and =visual-line-mode= in org-mode to make writing more comfortable.

=abbrev-mode= makes typing easier by offering abbreviations for common words.

=visual-line-mode= wraps long lines on screen, making the experience more word processor like.
#+begin_src emacs-lisp
  (setq abbrev-file-name
        "~/.emacs.d/abbrevs")
  (setq save-abbrevs t)
  #+end_src
* Ivy an counsel
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           ("C-c C-r" . ivy-resume)
           ("<f6>" . ivy-resume)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1)
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-wrap t)
    (ivy-count-format "(%d/%d)")
    (enable-recursive-minibuffers t))
  
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("<f1> f" . counsel-describe-function)
           ("<f1> v" . counsel-describe-variable)
           ("<f1> l" . counsel-load-library)
           ("<f2> i" . counsel-info-lookup-symbol)
           ("<f2> u" . counsel-unicode-char)
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-c k" . counsel-ag)
           ("C-x l" . counsel-locate))
    :custom (ivy-initial-inputs-alist nil))
  
  ;; (use-package ivy-rich
  ;;   :after ivy
  ;;   :init (ivy-rich-mode 1))
 #+end_src
* Helpful and which-key
=which-key= is a nice and helpful thing to have. After a prefix shows possible commands to use.
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode 1))
#+end_src

"[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides much more contextual information."

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    (([remap describe-function] . counsel-describe-function)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
    :config (evil-define-key 'normal helpful-mode-map (kbd "q") 'quit-window))
#+end_src
* word-count
#+begin_src emacs-lisp
  (load "word-count")
#+end_src
* Sentences end with one space
Why would anyone end sentences with two spaces?
This makes do-whatever-to-sentence commands work with my Finnish text with one space between sentences.
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
  (setq tab-width 4)
  (setq-default indent-tabs-mode nil)
#+end_src
* Scrolling
Hadn't even thought how annoying the default scrolling in Emacs was. This makes it better
#+begin_src emacs-lisp
  (setq scroll-step            1
	scroll-conservatively  10000)
#+end_src
* Misc configs
Keys for bigger and smaller text.
#+begin_src emacs-lisp
  (bind-key "C-+" 'text-scale-increase)
  (bind-key "C--" 'text-scale-decrease)
#+end_src

Show parenthesis. This is good even for a non-programmer. And of course helps with working with elisp here in config.
#+begin_src emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0)
#+end_src

Revert files automatically when they change on disk.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

Automatically make script files executable.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook
    'executable-make-buffer-file-executable-if-script-p)
#+END_SRC
Functions to convert Spotify song links and Youtube links in file to embed code.
#+begin_src emacs-lisp
  (defun tsl/spotify-links-to-embed ()
    "Convert Spotify song links to embed code."
    (interactive)
    (beginning-of-buffer)
    (while (re-search-forward "https:/+open\\.spotify\\.com/track/\\(.+\\)" nil t)
      (replace-match "<iframe src=\"https://embed.spotify.com/?uri=spotify%3Atrack%3A\\1\" width=\"100%\" height=\"100\" frameborder=\"0\" allowtransparency=\"true\"></iframe>" nil nil)))

  (defun tsl/youtube-links-to-embed ()
    "Convert Youtube song links to embed code."
    (interactive)
    (beginning-of-buffer)
    (while (re-search-forward "^https:/+www\\.youtube\\.com/watch\\?v=\\(.+\\)" nil t) ; Only search for links in beginning of line to avoid replacing links in text.
      (replace-match "<iframe width=\"100%\" height=\"456\" src=\"https://www.youtube.com/embed/\\1\" frameborder=\"0\" allowfullscreen></iframe>" nil nil)))
#+end_src
* Misc packages
Install some packages.
#+begin_src emacs-lisp
  (use-package palimpsest)
  (use-package paredit)
  (use-package rainbow-mode)
  (use-package key-chord)
  (use-package hydra)
#+end_src
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish
    :config (projectile-mode)
    :bind-keymap ("C-c p" . projectile-command-map))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+END_SRC
* Undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :init (global-undo-tree-mode)
    :config (setq evil-undo-system 'undo-tree))
#+end_src
* Evil-mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-abbrev-expand-on-insert-exit nil)
    :bind (("M-u" . universal-argument)
           :map universal-argument-map
           ("M-u" . universal-argument-more))
    :config (evil-mode 1))

  (use-package evil-org)

  (add-hook 'org-mode-hook
            (lambda ()
              (evil-org-mode)))

  (use-package evil-collection
    :after evil
    :config (evil-collection-init))

  (use-package evil-surround
    :config (global-evil-surround-mode 1))
#+end_src

Some key stuff.

- =Enter= in normal mode:
  - Insert new line below current one, unless cursor on link
  - If cursor on link, open the link
- In insert mode =jj= does =Esc=
- Evil commands in =org-agenda=

#+begin_src emacs-lisp
  (defun tsl/evil-insert-line-below-or-open-link ()
  "If cursor is on link, open the link with 'org-open-at-point. Otherwise insert new line under current one and return to evli-normal-state."
    (interactive)
    (if (and org-return-follows-link
             (or (org-in-regexp org-ts-regexp-both nil t)
                 (org-in-regexp org-tsr-regexp-both nil  t)
                 (org-in-regexp org-any-link-re nil t)))
        (call-interactively #'org-open-at-point)
      (evil-open-below nil)
      (evil-normal-state)))
  (define-key evil-normal-state-map [return] 'tsl/evil-insert-line-below-or-open-link)

  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (key-chord-define evil-insert-state-map "qq" "\\")
  (key-chord-mode 1)

  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
#+end_src

#+begin_src emacs-lisp
  (defalias 'org-agenda-bulk-remove-all-marks 'org-agenda-bulk-unmark-all)
#+end_src
* general.el
I decided to go with [[https://github.com/noctuid/general.el][general.el]] for vim-like leader key functionality. And easier key command in general.

At this point there's not many keys set. I know some functions I want to have quick access to, but I don't know the keys to bind them yet.

Work in progress.
#+BEGIN_SRC emacs-lisp
  (use-package general)

  (defun tsl/save-all ()
      (interactive)
    (save-some-buffers t))

  (general-define-key
                  :prefix "SPC"
                  :keymaps 'normal
                  "r" 'jump-to-register
                  "bb" 'switch-to-buffer
                  "bk" 'kill-current-buffer
                  "bc" 'clone-indirect-buffer-other-window
                  "ss" 'save-buffer
                  "sa" 'tsl/save-all
                  "t" 'org-todo
                  "q" 'evil-quit
                  "Q" 'save-buffers-kill-terminal
                  "d" 'org-cut-special
                  "y" 'org-copy-special
                  "p" 'org-paste-special
                  "ma" 'abbrev-mode
                  "ml" 'display-line-numbers-mode
                  "mp" 'electric-pair-mode
                  "mv" 'variable-pitch-mode
                  "fo" 'counsel-find-file
                  "fO" 'find-file-other-window
                  "fp" 'projectile-find-file
                  "fP" 'projectile-find-file
                  "u" 'undo-tree-visualize
                  "x" 'counsel-M-x
                  "cc" 'org-ctrl-c-ctrl-c
                  "mm" (lambda () (interactive)(set-window-margins nil 60 60))
                  "mM" (lambda () (interactive)(set-window-margins nil nil nil))
                  "SPC a" 'org-agenda
                  "SPC f" 'tsl/elfeed-load-db-and-open
                  "ns" 'org-narrow-to-subtree
                  "nw" 'widen
                  "g" 'hydra-magit/body
                  )
#+END_SRC
* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode 1))

  (use-package yasnippet-snippets)
#+end_src
* Hide show
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'hs-minor-mode)
(global-unset-key (kbd "C-\\"))
(global-set-key "\C-\\" 'hs-toggle-hiding)
#+END_SRC
* Line numbers
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook org-agenda-mode-hook term-mode-hook eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC
* Indentation highlight
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'column)
    (highlight-indent-guides-character ?X)
    (highlight-indent-guides-responsive 'stack)
    )
#+END_SRC
* Web development

#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook (css-mode . emmet-mode)
    (html-mode . emmet-mode)
    :bind (:map emmet-mode-keymap
                ("C-j" . emmet-expand-line)))

  (use-package js2-mode
    :mode
    (("\\.js\\'" . js2-mode))
    :hook (js2-mode . lsp-deferred)
    :custom
    (js2-prefer-let-over-var t)
    (js-indent-level 2)
    (js2-strict-missing-semi-warning nil)
    )

  (use-package js2-refactor
    :hook (js2-mode . js2-refactor-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    ;; :init
    ;; (define-key input-decode-map [?\C-i] [C-i])
    ;; (setq lsp-keymap-prefix "C-i")
    :config 
    (evil-define-key 'normal lsp-mode-map (kbd "C-c l") lsp-command-map)
    (lsp-enable-which-key-integration t))

  (use-package restclient
    :mode (("\\.rest\\'" . restclient-mode)))

#+END_SRC
* Tiny
#+BEGIN_SRC emacs-lisp
  (use-package tiny
    :bind ("C-;" . tiny-expand))

#+END_SRC

* Reload config file
Make a function to reload the config file.
#+begin_src emacs-lisp
  (defun tsl/reload-settings ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/conf.org"))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit)
  (global-set-key (kbd "C-x g") 'magit-status)

  (defhydra hydra-magit (:exit t)
    "magit"
    ("g" (magit) "magit")
    ("s" (magit-stage) "stage")
    ("c" (magit-commit) "commit")
    )
#+end_src
* Tramp
#+begin_src emacs-lisp
  (use-package tramp)

  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter")))
                 (tramp-remote-shell "/bin/sh")
                 (tramp-remote-shell-args ("-c"))))
#+end_src
* Ledger

[[https://www.ledger-cli.org/][Ledger]] is a command line tool for double-entry accounting.

Put ledger file to register for easy access and tell Emacs to start ledger-mode when opening ledger file.

#+begin_src emacs-lisp
  (use-package ledger-mode
    :mode "\\.ledger\\'"
    :hook (ledger-mode . tsl/ledger-setup)
    :config
    (set-register ?l '(file . "~/syncdir/ledger/my.ledger")))

  (defun tsl/ledger-setup ()
    (setq-local tab-always-indent 'complete)
    (setq-local completion-cycle-treshold t)
    (setq-local ledger-complete-in-steps t))
#+end_src
* browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-xdg-open)
#+END_SRC
* Neotree and ibuffer-sidebar
#+BEGIN_SRC emacs-lisp
  (use-package neotree)

  (use-package ibuffer-sidebar)

  (defun tsl/sidebars-toggle ()
    "Toggle neotree and ibuffer-sidebar"
    (interactive)
    (neotree-toggle)
    (ibuffer-sidebar-toggle-sidebar))

  (setq evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes))
  (global-set-key [f8] 'tsl/sidebars-toggle)

  (evil-define-key 'normal neotree-mode-map (kbd "l") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
  (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
#+END_SRC
* Org
** Pretty org-mode

Demote lists with different bullet.
#+BEGIN_SRC emacs-lisp
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))
(setq org-list-indent-offset 1)
(setq org-M-RET-may-split-line nil)
#+END_SRC
** Multiple line italics
Allow italizing and bolding multiple words, or even whole paragraph.
#+begin_src emacs-lisp
  (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\r\n,\"")
#+end_src
** Capture anywhere
Make it possible to pop up a quick capture frame when not in Emacs. This is bound to a key command in my Awesome window manager.
Makes it possible to capture notes, tasks, whatever. Copied from [[http://cestlaz.github.io/posts/using-emacs-24-capture-2/#.WQmyab2LRhE][Mike Zamansky's blog and video]].
#+begin_src emacs-lisp
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (use-package noflet)
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))
#+end_src
** Org-agenda and TODO stuff
Set org-agenda files
#+begin_src emacs-lisp
  (setq org-agenda-files
        '("~/syncdir/org/agenda/inbox.org"
          "~/syncdir/org/agenda/tickler.org"
          "~/syncdir/org/agenda/life.org"
          "~/syncdir/org/agenda/study.org"
          "~/syncdir/org/agenda/jamk.org"
          "~/syncdir/org/agenda/tech.org"))
#+end_src

Turn on some logging and put logs in LOGBOOK drawer.
#+begin_src emacs-lisp
  (setq org-log-into-drawer t)

  (setq org-log-reschedule 'time)
  (setq org-log-redeadline 'time)

  (setq org-log-done 'time)
#+end_src

Clock into CLOCKING drawer.
#+begin_src emacs-lisp
  (setq org-clock-into-drawer t)
#+end_src

Set todo keyword sequences. These are in Finnish, because I'm Finnish.

- TODO :: A task that is ready to be completed, and planned to as well
- KESKEN (unfinished) :: Started but not finished
- ODOTTAA (waiting) :: Waiting for action from someone else than me
- JOSKUS (someday) :: A task ready to be completed, but not planned in near future
- TAUOLLA (on break) :: A task like JOSKUS but was already started and then moved to the future
- IDEA :: More abstract idea or task. Needs planning of more concrete actions.
- VALMIS (done) :: No need for explanation
- PERUTTU (cancelled) :: Cancelled, for one reason or anohter

Some files have their own keyword sequences.
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "KESKEN(k@)" "ODOTTAA(o@)" "JOSKUS(j)" "TAUOLLA(T@)" "IDEA(i)" "|" "VALMIS(v)" "PERUTTU(p@)")))
#+end_src

If the todo item has undone children todos or checkboxes, it can't be marked done.
#+begin_src emacs-lisp
  (setq org-enforce-todo-dependencies nil)
  (setq org-track-ordered-property-with-tag t)
  (setq org-enforce-todo-checkbox-dependencies nil)
#+end_src

#+begin_src emacs-lisp
  (setq org-agenda-skip-deadline-prewarning-if-scheduled nil)
#+end_src
If I want TODO items automatically marked DONE when all the children are DONE, I uncomment this. At this point I don't want that.
#+begin_src emacs-lisp
;  (defun org-summary-todo (n-done n-not-done)
 ;   "Switch entry to DONE when all subentries are done, to TODO otherwise."
  ;  (let (org-log-done org-log-states)   ; turn off logging
   ;   (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

;  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+end_src

I usually refile things between org-agenda files. But sometimes need to refile somewhere in current, non-agenda file, for example here in config.
Set =org-refile-targets= to include current file, agenda files, and bunch of other files (defined in =.emacs.secrets.el=)
#+begin_src emacs-lisp
    (setq org-refile-targets '((nil :maxlevel . 3)
                               (org-agenda-files :maxlevel . 3)
                               (tsl/refile-files :maxlevel . 3)
                               ))

    (setq org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-agenda-deadline-faces '((1.0 . org-warning)
                                      (0.9 . org-scheduled-today)
                                      (0.5 . org-upcoming-deadline)
                                      (0.0 . org-special-keyword)))
    (setq org-deadline-warning-days 10)

  ;org-agenda-deadline-faces is a variable defined in ‘org-faces.el’.
  ;Its value is
  ;((1.0 . org-warning)
  ; (0.5 . org-upcoming-deadline)
  ; (0.0 . default))

(setq org-archive-file-header-format nil)

#+end_src
** Agenda commands
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("d" "päivä"
           ((agenda "" ((org-agenda-span 1)
                        (org-agenda-overriding-header "Tänään")))
            (todo "KESKEN"
                  ((org-agenda-overriding-header "Kesken olevat")))
            ))

          ("v" "viikko"
           ((agenda "" ((org-agenda-span 7)
                        (org-agenda-overriding-header "Tällä viikolla")))
          ))

          ("o" "opiskelut" todo ""
           (
            (org-agenda-files '("~/syncdir/org/agenda/study.org"))
            (org-agenda-sorting-strategy '(deadline-up))
            ))

          ("j" . "JAMK")
          ("jt" "JAMK todo" tags-todo "-inakt"
           (
            (org-agenda-files '("~/syncdir/org/agenda/jamk.org"))
            (org-agenda-sorting-strategy '(deadline-up effort-down))
            ))
          ("jo" "JAMK odottaa" todo "ODOTTAA"
           (
            (org-agenda-files '("~/syncdir/org/agenda/jamk.org"))
            (org-agenda-sorting-strategy '(scheduled-up))
            ))
          ("jd" "JAMK deadlines"
           ((agenda "" ((org-agenda-span 1)
                        (org-deadline-warning-days 365)
                        (org-agenda-files '("~/syncdir/org/agenda/jamk.org"))))
            ))))

                                          ; Keys reserved for built-in commands are:
                                          ; a t T m M s S L C e / ? < > * #
#+end_src

#+begin_src emacs-lisp
  (setq org-agenda-block-separator ?:)
#+end_src
** Inherited tags in agenda
Remove tag clutter from agenda view. Disabled for now.
#+begin_src emacs-lisp
 (setq org-agenda-show-inherited-tags t)
#+end_src
** Exporting
*** Export macros
This is for exporting and copying the result to clipboard, to be pasted to Blogger.

Export current subree, body only, in HTML to buffer. Select all, kill-region.
#+begin_src emacs-lisp
  ;; (fset 'tsl/blog-export
  ;;       "\C-c\C-e\C-b\C-shH\C-xh\C-w\C-x0")
  (fset 'tsl/blog-export
        "\C-c\C-e\C-b\C-shHVGy\C-x0")
#+end_src
Export org file to ascii.
#+begin_src emacs-lisp
  (fset 'tsl/ascii-export
	"\C-c\C-etA\C-xh\C-w\C-x0")
#+end_src
*** org-reveal
Export org files to [[https://github.com/hakimel/reveal.js/][reveal.js]]
#+begin_src emacs-lisp
  (use-package ox-reveal)

  ;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0")
  ;
  (setq org-reveal-mathjax t)

  (use-package htmlize)

  (fset 'tsl/revealjs-export
	"\C-c\C-eRB")
#+end_src
*** Ascii exporting
When exporting to ASCII, I want the text to be clean as possible, so I can take it to another program (ie. Scribus or Google Drive) as raw text, and style it there. There are reasons for me needing to do this.

Following function does these things:
- set width of exported ascii text to the length of the longest line to avoid line breaks in paragraphs
- set empty lines around headlines and between paragraphs to 0
- don't indent the body text
- don't use any characters under headlines
#+begin_src emacs-lisp
;  (defun tsl/org-ascii-clean-text ()
;    (save-excursion (setq org-ascii-text-width
;                          (cadr (goto-longest-line (point-min) (point-max))))
;                          (setq org-ascii-headline-spacing '(0 . 0))
;                          (setq org-ascii-paragraph-spacing 0)
;                          (setq org-ascii-inner-margin 0)
;                          (setq org-ascii-underline '((ascii nil nil nil)
;			  (latin1 nil nil nil)
;			  (utf-8 nil nil nil nil nil)))))
#+end_src
#+begin_src emacs-lisp
  (defun tsl/org-ascii-clean-text ()
    (interactive)
    (setq org-ascii-text-width 1000)
    (setq org-ascii-headline-spacing '(0 . 0))
    (setq org-ascii-paragraph-spacing 0)
    (setq org-ascii-inner-margin 0)
    (setq org-ascii-underline '((ascii nil nil nil)
                                (latin1 nil nil nil)
                                (utf-8 nil nil nil nil nil))))
#+end_src
Run the function when saving an org-mode buffer. This way the text width keeps up when the text changes.
#+begin_src emacs-lisp
;  (add-hook 'before-save-hook
;            (lambda () (if (eq major-mode 'org-mode)
;                           (tsl/org-ascii-clean-text))))
#+end_src
** Day lasts until 5 a.m.
In org-agenda next day starts at 5 a.m. instead of midnight, because I'm a vampire.
#+begin_src emacs-lisp
; (setq org-extend-today-until 5)
#+end_src
** enter follows links
In org files, open links by pressing =Enter=
#+begin_src emacs-lisp
  (setq org-return-follows-link t)
#+end_src
** Defalt appointment duration
If I don't set the ending time when scheduling appointments or whatever, the default duration is 60 minutes.
#+begin_src emacs-lisp
  (setq org-agenda-default-appointment-duration 60)
#+end_src
** Create timestamp under heading
=org-schedule= and =org-deadline= create a timestamp right after the heading of the subtree, no matter where in the subtree the command is run. =org-timestamp= creates the timestamp at cursor position.

I want to use scheduling and deadlines as little as possible, and use simple timestamps to make my tasks appear in agenda instead. My tasks are often only a heading, so it's annoying to create a new line just for the timestamp.

This function is a quick fix for that. If run on a heading, it creates the timestamp under the heading. If run anywhere else, it creates the timestamp at cursor position as it normally would.

Probably not the fanciest fix, but so far it works.
#+begin_src emacs-lisp
  (defun tsl/org-timestamp ()
    (interactive)
    (if (org-at-heading-p)
        (progn (org-end-of-line)
               (org-return)
               (org-time-stamp nil))
      (org-time-stamp nil)))

  (define-key org-mode-map (kbd "C-c .") 'tsl/org-timestamp)
#+end_src
** widths
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'only-window)
  (setq org-habit-graph-column 60)

  (setq org-agenda-prefix-format
        '((agenda . "%-20:c%-12t%-8 s")
          (todo . "%-20:c%-12t")
          (tags . "%-20:c")
          (search . "%-20:c")))
  (setq org-agenda-scheduled-leaders '("++++" "%2d +"))
  (setq org-agenda-deadline-leaders '("!!!!" "!%3d" "%2d !"))

  (setq org-columns-default-format-for-agenda "%40ITEM(Task) %TODO %SCHEDULED %DEADLINE %7Effort(Estimated Effort){:} %7CLOCKSUM")

  (setq org-tags-column -75)
#+END_SRC
** uml
#+BEGIN_SRC emacs-lisp
  ;; active Org-babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((plantuml . t)
     (python . t)))

  (setq org-plantuml-jar-path
        (expand-file-name "~/Downloads/plantuml.jar"))
  (setq plantuml-jar-path
        (expand-file-name "~/Downloads/plantuml.jar"))
#+END_SRC
** clocking to bar
=tsl/current-clock-time-to-file= originally found [[https://github.com/schmendrik/OrgClockTray][here]].
#+BEGIN_SRC emacs-lisp
  (defun tsl/current-clock-time-to-file ()
    (interactive)
    (with-temp-file "/tmp/org-clock-string"
      (if (org-clocking-p)
          (insert (org-clock-get-clock-string))
        (insert ""))))
  (run-with-timer 1 60 'tsl/current-clock-time-to-file)
  (add-hook 'org-clock-in-hook 'tsl/current-clock-time-to-file)
  (add-hook 'org-clock-out-hook 'tsl/current-clock-time-to-file)
  (add-hook 'org-clock-cancel-hook 'tsl/current-clock-time-to-file)

  (defun tsl/org-clock-out-or-in-last ()
    (interactive)
    (if (org-clocking-p)
        (org-clock-out)
      (org-clock-in-last)))
#+END_SRC
* elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :config (setq elfeed-db-directory "~/.emacs.d/elfeed/db")
    (setq-default elfeed-search-filter "@6-months-old +unread ")
    (evil-define-key 'normal elfeed-search-mode-map
      "o" 'elfeed-search-browse-url
      "m" 'elfeed-search-untag-all-unread
      "M" 'elfeed-mark-all-as-read
      "u" 'elfeed-search-tag-all-unread
      "U" 'elfeed-mark-all-as-unread
      "O" 'elfeed-search-show-entry
      "q" 'tsl/elfeed-save-db-and-kill-buffer
      "y" 'elfeed-search-yank
      "S" 'elfeed-search-live-filter
      "s" 'elfeed-search-set-filter
      "r" 'elfeed-search-update--force
      "w" 'tsl/elfeed-save-db
      "R" 'elfeed-search-fetch
      "ö" 'tsl/elfeed-flip-sort-order
      "f" 'hydra-elfeed-tags/body)
    (evil-define-key 'normal elfeed-show-mode-map
      "o" 'elfeed-show-visit
      "q" 'elfeed-kill-buffer
      "n" 'elfeed-goodies/split-show-next
      "p" 'elfeed-goodies/split-show-prev
      "y" 'elfeed-show-yank
      ))

  (defhydra hydra-elfeed-tags (:exit t)
    "filter"
    ("y" (elfeed-search-set-filter "@6-months-ago +unread +yt ") "youtube")
    ("r" (elfeed-search-set-filter "@6-months-ago +unread +reddit ") "reddit")
    ("b" (elfeed-search-set-filter "@6-months-ago +unread +blog ") "blogit")
    ("c" (elfeed-search-set-filter "@6-months-ago +unread +comic ") "sarjakuvat")
    ("u" (elfeed-search-set-filter "@6-months-ago +unread +news +fi ") "uutiset, fi")
    ("n" (elfeed-search-set-filter "@6-months-ago +unread +news +en ") "uutiset, en")
    ("s" (call-interactively 'tsl/elfeed-set-filter-to-selected) "tags of selected entry")
    ("S" (call-interactively 'tsl/elfeed-set-filter-to-selected-feed) "selected feed")
    ("f" (elfeed-search-set-filter nil) "default")
    )

  (defun tsl/check-elfeed-and-update ()
    "Check if *elfeed-search* buffer exist. If not, create it and load database. Update all feeds, and save database."
    (interactive)
    (if (get-buffer "*elfeed-search*")
        (elfeed-search-fetch nil)
      (tsl/elfeed-load-db-and-open)
      (message "päivitetään syötteet")
      (elfeed-search-fetch nil))
    (message "tallennetaan tietokanta")
    (elfeed-db-save)) ; kokeile

  (defun tsl/elfeed-save-db-and-kill-buffer ()
    "Save elfeed database and kill *elfeed-search* buffer."
    (interactive)
    (elfeed-db-save)
    (elfeed-kill-buffer))

  (defun tsl/elfeed-save-db ()
    "Save database."
    (interactive)
    (elfeed-db-save))

  (defun elfeed-mark-all-as-read ()
    (interactive)
    (mark-whole-buffer)
    (elfeed-search-untag-all-unread))

  (defun elfeed-mark-all-as-unread ()
    (interactive)
    (mark-whole-buffer)
    (elfeed-search-tag-all-unread))

  (defun elfeed-search-tag-all-wl ()
    (interactive)
    (elfeed-search-tag-all 'wl))

  (defun elfeed-search-untag-all-wl ()
    (interactive)
    (elfeed-search-untag-all 'wl))

  (use-package elfeed-goodies
    :config (elfeed-goodies/setup)
    (setq elfeed-goodies/powerline-default-separator nil))

  (defun tsl/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  (defun tsl/elfeed-set-filter-to-selected (entry)
    "Set elfeed filter to tags of the selected entry."
    (interactive (list (elfeed-search-selected :ignore-region)))
    (when (elfeed-entry-p entry)
      (let ((tags-list (elfeed-entry-tags entry))
            (tags-string "@6-months-ago "))
        (if (not (member 'unread tags-list))
            (setq tags-string (concat tags-string "+unread ")))
        (while tags-list
          (setq tags-string (concat tags-string "+" (format "%s" (car tags-list)) " "))
          (setq tags-list (cdr tags-list)))
        (elfeed-search-set-filter tags-string)
        (beginning-of-buffer))))

  (defun tsl/elfeed-set-filter-to-selected-feed (entry)
    "Set filter to feed under the cursor."
    (interactive (list (elfeed-search-selected :ignore-region)))
    (let ((feed (elfeed-entry-feed entry)))
      (setq feed-title (elfeed-meta feed :title))
      (message "Filter: %s" feed-title)
      (elfeed-search-set-filter (concat "@6-months-old +unread =^" (replace-regexp-in-string " " "\s-" feed-title) "$"))
      (beginning-of-buffer)))

  (defun tsl/elfeed-flip-sort-order ()
    "Switch elfeed-sort-order between 'ascending' and 'descencing'."
    (interactive)
    (if (equal (symbol-value 'elfeed-sort-order) 'descending)
        (setq elfeed-sort-order 'ascending)
      (setq elfeed-sort-order 'descending))
    (elfeed-search-update--force)
    (beginning-of-buffer)
    (message "Sort order: %s" elfeed-sort-order))

  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed/elfeed.org")))
#+END_SRC
* spotify.el
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/spotify.el")
  (require 'spotify)
  (define-key spotify-mode-map (kbd "C-c .") 'spotify-command-map)
#+END_SRC
* company-mode
#+BEGIN_SRC emacs-lisp
    (use-package company
      :custom
      (company-minimum-prefix-length 3)
      (company-idle-delay 0.3)
      :bind (:map company-active-map
                  ("<tab>" . yas-expand))
  )
#+END_SRC
* C
#+BEGIN_SRC emacs-lisp
  (setq c-default-style '(("csharp-mode" . "csharp") (other . "linux")))
  (setq-default c-basic-offset 4)
#+END_SRC
* week number
#+BEGIN_SRC emacs-lisp
(copy-face font-lock-constant-face 'calendar-iso-week-face)
(set-face-attribute 'calendar-iso-week-face nil
                    :height 0.7)
(setq calendar-intermonth-text
      '(propertize
        (format "%2d"
                (car
                 (calendar-iso-from-absolute
                  (calendar-absolute-from-gregorian (list month day year)))))
        'font-lock-face 'calendar-iso-week-face))
#+END_SRC
* License
[[https://www.gnu.org/licenses/gpl-3.0.en.html][GNU General Public License]]
